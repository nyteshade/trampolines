# Modular Trampoline Library Makefile
# Supports building core library and optional classes as separate modules

# Compiler and flags
CC = gcc
AR = ar
CFLAGS = -Wall -O2 -fPIC
LDFLAGS = -shared

# Detect OS for library extension
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
    DYLIB_EXT = dylib
    LDFLAGS = -dynamiclib
else
    DYLIB_EXT = so
endif

# Detect architecture for source selection
UNAME_M := $(shell uname -m)
ifeq ($(UNAME_M),x86_64)
    ARCH_SRC = trampoline_x86_64.c
else ifeq ($(UNAME_M),arm64)
    ARCH_SRC = trampoline_arm64.c
else ifeq ($(UNAME_M),aarch64)
    ARCH_SRC = trampoline_arm64.c
else
    $(error Unsupported architecture: $(UNAME_M))
endif

# Directories
INCLUDE_DIR = include
SRC_DIR = src
LIB_DIR = lib
CLASSES_DIR = $(SRC_DIR)/classes
INSTALL_PREFIX = /usr/local

# Core library files
CORE_SRCS = $(ARCH_SRC) trampoline_helpers.c
CORE_OBJS = $(CORE_SRCS:.c=.o)
CORE_LIB_STATIC = $(LIB_DIR)/libtrampoline.a
CORE_LIB_SHARED = $(LIB_DIR)/libtrampoline.$(DYLIB_EXT)

# Optional class libraries
STRING_SRC = $(CLASSES_DIR)/string.c
STRING_OBJ = $(CLASSES_DIR)/string.o
STRING_LIB_STATIC = $(LIB_DIR)/libtrampoline_string.a
STRING_LIB_SHARED = $(LIB_DIR)/libtrampoline_string.$(DYLIB_EXT)

# Default target
all: core

# Core library targets
core: $(CORE_LIB_STATIC) $(CORE_LIB_SHARED)

$(CORE_LIB_STATIC): $(CORE_OBJS) | $(LIB_DIR)
	$(AR) rcs $@ $^
	@echo "Built static core library: $@"

$(CORE_LIB_SHARED): $(CORE_OBJS) | $(LIB_DIR)
ifeq ($(UNAME_S),Darwin)
	$(CC) $(LDFLAGS) -install_name @rpath/libtrampoline.$(DYLIB_EXT) -o $@ $^
else
	$(CC) $(LDFLAGS) -o $@ $^
endif
	@echo "Built shared core library: $@"

# Optional string class (builds as separate library)
string: $(STRING_LIB_STATIC) $(STRING_LIB_SHARED)

$(STRING_LIB_STATIC): $(STRING_OBJ) | $(LIB_DIR)
	$(AR) rcs $@ $^
	@echo "Built static string library: $@"

$(STRING_LIB_SHARED): $(STRING_OBJ) | $(LIB_DIR) core
ifeq ($(UNAME_S),Darwin)
	$(CC) $(LDFLAGS) -install_name @rpath/libtrampoline_string.$(DYLIB_EXT) \
		-L$(LIB_DIR) -ltrampoline -o $@ $<
else
	$(CC) $(LDFLAGS) -L$(LIB_DIR) -ltrampoline -o $@ $<
endif
	@echo "Built shared string library: $@"
	@echo "Note: Link with both -ltrampoline and -ltrampoline_string"

$(STRING_OBJ): $(STRING_SRC) $(INCLUDE_DIR)/trampolines/string.h
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

# Create lib directory if it doesn't exist
$(LIB_DIR):
	mkdir -p $(LIB_DIR)

# Pattern rule for core object files
%.o: %.c trampoline.h
	$(CC) $(CFLAGS) -c $< -o $@

# Installation targets
install-core: core
	@echo "Installing core trampoline library..."
	install -d $(INSTALL_PREFIX)/include
	install -d $(INSTALL_PREFIX)/lib
	install -m 644 trampoline.h $(INSTALL_PREFIX)/include/
	install -m 644 $(CORE_LIB_STATIC) $(INSTALL_PREFIX)/lib/
	install -m 755 $(CORE_LIB_SHARED) $(INSTALL_PREFIX)/lib/
ifeq ($(UNAME_S),Darwin)
	@echo "Updating dylib install names..."
	install_name_tool -id $(INSTALL_PREFIX)/lib/libtrampoline.$(DYLIB_EXT) \
		$(INSTALL_PREFIX)/lib/libtrampoline.$(DYLIB_EXT)
endif
	@echo "Core library installed to $(INSTALL_PREFIX)"

install-string: string
	@echo "Installing string class..."
	install -d $(INSTALL_PREFIX)/include/trampolines
	install -m 644 $(INCLUDE_DIR)/trampolines/string.h $(INSTALL_PREFIX)/include/trampolines/
	install -m 644 $(STRING_LIB_STATIC) $(INSTALL_PREFIX)/lib/
	install -m 755 $(STRING_LIB_SHARED) $(INSTALL_PREFIX)/lib/
ifeq ($(UNAME_S),Darwin)
	@echo "Updating dylib install names..."
	install_name_tool -id $(INSTALL_PREFIX)/lib/libtrampoline_string.$(DYLIB_EXT) \
		$(INSTALL_PREFIX)/lib/libtrampoline_string.$(DYLIB_EXT)
endif
	@echo "String class installed to $(INSTALL_PREFIX)"

install: install-core

install-all: install-core install-string

# Uninstall targets
uninstall-core:
	@echo "Uninstalling core library..."
	rm -f $(INSTALL_PREFIX)/include/trampoline.h
	rm -f $(INSTALL_PREFIX)/lib/libtrampoline.a
	rm -f $(INSTALL_PREFIX)/lib/libtrampoline.$(DYLIB_EXT)

uninstall-string:
	@echo "Uninstalling string class..."
	rm -f $(INSTALL_PREFIX)/include/trampolines/string.h
	rm -f $(INSTALL_PREFIX)/lib/libtrampoline_string.a
	rm -f $(INSTALL_PREFIX)/lib/libtrampoline_string.$(DYLIB_EXT)
	rmdir $(INSTALL_PREFIX)/include/trampolines 2>/dev/null || true

uninstall: uninstall-core

uninstall-all: uninstall-core uninstall-string

# Clean targets
clean:
	rm -f *.o
	rm -f $(CLASSES_DIR)/*.o
	rm -rf $(LIB_DIR)

# Example programs for testing
example-string: string core
	@echo "Building string example..."
	@mkdir -p examples/bin
	$(CC) -o examples/bin/string_test examples/test_string.c \
		-I$(INCLUDE_DIR) -L$(LIB_DIR) \
		-ltrampoline_string -ltrampoline \
		-Wl,-rpath,$(LIB_DIR)
	@echo "Run with: examples/bin/string_test"

# Help target
help:
	@echo "Modular Trampoline Library Build System"
	@echo "========================================"
	@echo ""
	@echo "Build targets:"
	@echo "  make              - Build core library only"
	@echo "  make core         - Build core library"
	@echo "  make string       - Build string class library"
	@echo ""
	@echo "Installation targets:"
	@echo "  make install      - Install core library"
	@echo "  make install-all  - Install core and all class libraries"
	@echo "  make install-string - Install string class library"
	@echo ""
	@echo "Uninstall targets:"
	@echo "  make uninstall    - Uninstall core library"
	@echo "  make uninstall-all - Uninstall everything"
	@echo "  make uninstall-string - Uninstall string class"
	@echo ""
	@echo "Example targets:"
	@echo "  make example-string - Build string example program"
	@echo ""
	@echo "Other:"
	@echo "  make clean        - Remove all built files"
	@echo "  make help         - Show this help message"
	@echo ""
	@echo "Usage examples:"
	@echo "  Build and install core:    make && sudo make install"
	@echo "  Build string class:         make string"
	@echo "  Install string class:       sudo make install-string"
	@echo "  Link with core:            gcc prog.c -ltrampoline"
	@echo "  Link with string:          gcc prog.c -ltrampoline -ltrampoline_string"

.PHONY: all core string install install-all install-core install-string \
        uninstall uninstall-all uninstall-core uninstall-string \
        clean example-string help