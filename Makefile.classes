# Trampoline Library Build System
# Core library (libtrampoline) + Optional classes library (libtrampolines)

# Include SSL configuration
-include Makefile.config

# Compiler and flags
CC = gcc
AR = ar
CFLAGS = -Wall -O2 -fPIC $(SSL_CFLAGS)
LDFLAGS = -shared

# Detect OS for library extension
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
    DYLIB_EXT = dylib
    LDFLAGS = -dynamiclib
else
    DYLIB_EXT = so
endif

# Detect architecture for source selection
UNAME_M := $(shell uname -m)
ifeq ($(UNAME_M),x86_64)
    ARCH_SRC = trampoline_x86_64.c
else ifeq ($(UNAME_M),arm64)
    ARCH_SRC = trampoline_arm64.c
else ifeq ($(UNAME_M),aarch64)
    ARCH_SRC = trampoline_arm64.c
else
    $(error Unsupported architecture: $(UNAME_M))
endif

# Directories
INCLUDE_DIR = include
SRC_DIR = src
LIB_DIR = lib
CLASSES_DIR = $(SRC_DIR)/classes
INSTALL_PREFIX = /usr/local

# Core library files
CORE_SRCS = $(ARCH_SRC) trampoline_helpers.c
CORE_OBJS = $(CORE_SRCS:.c=.o)
CORE_LIB_STATIC = $(LIB_DIR)/libtrampoline.a
CORE_LIB_SHARED = $(LIB_DIR)/libtrampoline.$(DYLIB_EXT)

# Classes library files (all optional classes in one library)
CLASSES_SRCS = $(CLASSES_DIR)/string.c \
               $(CLASSES_DIR)/network_common.c \
               $(CLASSES_DIR)/network_request.c \
               $(CLASSES_DIR)/network_response.c
CLASSES_OBJS = $(CLASSES_SRCS:.c=.o)
CLASSES_LIB_STATIC = $(LIB_DIR)/libtrampolines.a
CLASSES_LIB_SHARED = $(LIB_DIR)/libtrampolines.$(DYLIB_EXT)

# Headers to install
CLASSES_HEADERS = $(INCLUDE_DIR)/trampolines/string.h \
                  $(INCLUDE_DIR)/trampolines/network.h

# Default target
all: core classes

# Core library targets
core: $(CORE_LIB_STATIC) $(CORE_LIB_SHARED)

$(CORE_LIB_STATIC): $(CORE_OBJS) | $(LIB_DIR)
	$(AR) rcs $@ $^
	@echo "Built static core library: $@"

$(CORE_LIB_SHARED): $(CORE_OBJS) | $(LIB_DIR)
ifeq ($(UNAME_S),Darwin)
	$(CC) $(LDFLAGS) -install_name @rpath/libtrampoline.$(DYLIB_EXT) -o $@ $^
else
	$(CC) $(LDFLAGS) -o $@ $^
endif
	@echo "Built shared core library: $@"

# Classes library (single library containing all classes)
classes: core $(CLASSES_LIB_STATIC) $(CLASSES_LIB_SHARED)

$(CLASSES_LIB_STATIC): $(CLASSES_OBJS) | $(LIB_DIR)
	$(AR) rcs $@ $^
	@echo "Built static classes library: $@"

$(CLASSES_LIB_SHARED): $(CLASSES_OBJS) | $(LIB_DIR) core
ifeq ($(UNAME_S),Darwin)
	$(CC) $(LDFLAGS) -install_name @rpath/libtrampolines.$(DYLIB_EXT) \
		-L$(LIB_DIR) -ltrampoline $(SSL_LDFLAGS) -o $@ $(CLASSES_OBJS)
else
	$(CC) $(LDFLAGS) -L$(LIB_DIR) -ltrampoline $(SSL_LDFLAGS) -o $@ $(CLASSES_OBJS)
endif
	@echo "Built shared classes library: $@"
	@echo "Note: Link with -ltrampoline -ltrampolines"

# Create lib directory if it doesn't exist
$(LIB_DIR):
	mkdir -p $(LIB_DIR)

# Pattern rules for object files
%.o: %.c trampoline.h
	$(CC) $(CFLAGS) -c $< -o $@

# Specific rules for class object files with proper include paths
src/classes/string.o: src/classes/string.c include/trampolines/string.h
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

src/classes/network_common.o: src/classes/network_common.c src/classes/network_common.h
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

src/classes/network_request.o: src/classes/network_request.c include/trampolines/network.h src/classes/network_common.h
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

src/classes/network_response.o: src/classes/network_response.c include/trampolines/network.h
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

# Installation targets
install-core: core
	@echo "Installing core trampoline library..."
	install -d $(INSTALL_PREFIX)/include
	install -d $(INSTALL_PREFIX)/lib
	install -m 644 trampoline.h $(INSTALL_PREFIX)/include/
	install -m 644 $(CORE_LIB_STATIC) $(INSTALL_PREFIX)/lib/
	install -m 755 $(CORE_LIB_SHARED) $(INSTALL_PREFIX)/lib/
ifeq ($(UNAME_S),Darwin)
	@echo "Updating dylib install names..."
	install_name_tool -id $(INSTALL_PREFIX)/lib/libtrampoline.$(DYLIB_EXT) \
		$(INSTALL_PREFIX)/lib/libtrampoline.$(DYLIB_EXT)
endif
	@echo "Core library installed to $(INSTALL_PREFIX)"

install-classes: classes
	@echo "Installing classes library..."
	install -d $(INSTALL_PREFIX)/include/trampolines
	for header in $(CLASSES_HEADERS); do \
		if [ -f $$header ]; then \
			install -m 644 $$header $(INSTALL_PREFIX)/include/trampolines/; \
		fi \
	done
	install -m 644 $(CLASSES_LIB_STATIC) $(INSTALL_PREFIX)/lib/
	install -m 755 $(CLASSES_LIB_SHARED) $(INSTALL_PREFIX)/lib/
ifeq ($(UNAME_S),Darwin)
	@echo "Updating dylib install names..."
	install_name_tool -id $(INSTALL_PREFIX)/lib/libtrampolines.$(DYLIB_EXT) \
		$(INSTALL_PREFIX)/lib/libtrampolines.$(DYLIB_EXT)
endif
	@echo "Classes library installed to $(INSTALL_PREFIX)"

install: install-core install-classes

# Uninstall targets
uninstall-core:
	@echo "Uninstalling core library..."
	rm -f $(INSTALL_PREFIX)/include/trampoline.h
	rm -f $(INSTALL_PREFIX)/lib/libtrampoline.a
	rm -f $(INSTALL_PREFIX)/lib/libtrampoline.$(DYLIB_EXT)

uninstall-classes:
	@echo "Uninstalling classes library..."
	rm -f $(INSTALL_PREFIX)/include/trampolines/*.h
	rm -f $(INSTALL_PREFIX)/lib/libtrampolines.a
	rm -f $(INSTALL_PREFIX)/lib/libtrampolines.$(DYLIB_EXT)
	rmdir $(INSTALL_PREFIX)/include/trampolines 2>/dev/null || true

uninstall: uninstall-core uninstall-classes

# Clean targets
clean:
	rm -f *.o
	rm -f $(CLASSES_DIR)/*.o
	rm -rf $(LIB_DIR)

# Build only string class object (for testing individual classes)
string-obj: $(CLASSES_DIR)/string.o
	@echo "Built string.o"

# Build only network class objects (for testing individual classes)
network-obj: $(CLASSES_DIR)/network_request.o $(CLASSES_DIR)/network_response.o
	@echo "Built network objects"

# Example programs for testing
example-all: classes
	@echo "Building combined example..."
	@mkdir -p examples/bin
	$(CC) -o examples/bin/classes_test examples/test_classes.c \
		-I$(INCLUDE_DIR) -L$(LIB_DIR) \
		-ltrampolines -ltrampoline \
		-Wl,-rpath,$(LIB_DIR)
	@echo "Run with: examples/bin/classes_test"

# Help target
help:
	@echo "Trampoline Library Build System"
	@echo "================================"
	@echo ""
	@echo "Build targets:"
	@echo "  make              - Build both core and classes libraries"
	@echo "  make core         - Build core library only (libtrampoline)"
	@echo "  make classes      - Build all classes library (libtrampolines)"
	@echo "  make string-obj   - Build only string class object"
	@echo "  make network-obj  - Build only network class objects"
	@echo ""
	@echo "Installation targets:"
	@echo "  make install      - Install both libraries"
	@echo "  make install-core - Install core library only"
	@echo "  make install-classes - Install classes library"
	@echo ""
	@echo "Uninstall targets:"
	@echo "  make uninstall    - Uninstall everything"
	@echo "  make uninstall-core - Uninstall core library"
	@echo "  make uninstall-classes - Uninstall classes library"
	@echo ""
	@echo "Other:"
	@echo "  make clean        - Remove all built files"
	@echo "  make help         - Show this help message"
	@echo ""
	@echo "Usage:"
	@echo "  Core only:        gcc prog.c -ltrampoline"
	@echo "  With classes:     gcc prog.c -ltrampoline -ltrampolines"
	@echo ""
	@echo "Current classes in libtrampolines:"
	@echo "  - String  (trampolines/string.h)"
	@echo "  - Network (trampolines/network.h) [TODO]"

.PHONY: all core classes install install-core install-classes \
        uninstall uninstall-core uninstall-classes \
        clean string-obj network-obj example-all help